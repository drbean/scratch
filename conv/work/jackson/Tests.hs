module Tests where

import LogicalForm
import Parsing

all_tests = test_text ++ comp_test1 ++ comp_test2 ++ tag_test ++ neg_tag_test ++
		test_possessives ++ haves ++ intransitives ++ transitives ++ 
		ditransitive_tests ++ relclauses ++ relppR_test
		-- ++ wh_questions ++ comp_wh_questions
		-- ++ ungrammatical

test_text = [
	"Queen's daughter talked to Debra.",
	-- "Queen's daughter's brother spoke English.",
	"Queen's daughter had a brother and a brother was black.",
	"Queen's daughter talked to Debra and a counselor talked to Jennifer.",
	"Queen's daughter talked to Debra but a counselor didn't talk to Jennifer.",
	"Queen talked to a counselor and a counselor talked to Queen's daughter.",
	"Queen talked to a counselor and a counselor talked to Debra \
	\and Debra talked to Queen.",
	"Queen looked back on a daughter's upbringing. \
	\Queen talked to a counselor. \
	\Queen's daughter asked a counselor about Queen."
	]

comp_test1 = [
	"Queen was older.",
	"Queen was homeless.",
	"Queen was a mother.",
	"Queen was Jennifer's mother.",
	"Queen was a homeless woman.",
	"Queen was a man.",
	"Queen was a woman.",
	"Queen was a visitor.",
	"A man was a visitor.",
	"A woman was a visitor.",
	"The woman was a visitor.",
	"Queen was a black woman.",
	"Queen was the black woman.",
	"A black woman was Queen.",
	"A homeless woman was Queen.",
	"The homeless woman was Queen.",
	"The black woman was Queen.",
	-- "The older black woman was Queen.",
	-- "Queen was the older black woman.",
	"Jennifer was the black woman's mother.",
	"Jennifer was the black woman's daughter.",
	"Jennifer was a black woman's daughter.",
	"Jennifer was a homeless woman's daughter.",
	"Jennifer was a homeless woman's counselor.",
	"Tanya was the homeless women's counselor.",
	"Debra was the homeless women's counselor.",
	"Debra was a homeless woman's counselor.",
	"Debra was the black woman's counselor.",
	"Debra was a black woman's counselor.",
	"Debra was Queen's counselor.",
	"Tanya was Queen's counselor.",
	"Tanya was Ann's counselor.",
	"Jennifer was Queen's daughter.",
	"Jennifer was Debra's daughter.",
	"Queen was Debra's daughter.",
	"Queen was Debra's mother.",
	"Queen was Jennifer's mother.",
	"Some women were homeless.",
	"Tanya was a counselor and Debra was a counselor.",
	"Tanya was a woman and Debra was a woman",
	"Some counselors were women.",
	"Some women were counselors.",
	"All counselors were women.",
	"All women were counselors.",
	"All homeless women were older."
	]

comp_test2 = [
	"Some woman was homeless.",
	"Some women was older.",
	"Some women were older.",
	"Debra was a woman.",
	"Was Debra a woman?",
	"Were some women counselors?",
	"Was Ann's counselor a woman?",
	"Debra was Tanya's counselor.",
	"Debra was Ann's counselor.",
	"Debra was Queen's counselor.",
	"Queen was a homeless woman who was a mother.",
	"Queen was a homeless woman who had a daughter.",
	"Queen was a homeless woman with a daughter.",
	"Queen was a homeless woman from a daughter.",
	"The homeless woman who had a daughter was Queen.",
	"Queen had a daughter.",
	"Queen was a homeless woman.",
	"Queen was a woman who was homeless.",
	"Ann was Queen's daughter.",
	"Queen was Ann's daughter.",
	"Ann was Queen's counselor."
	]

tag_test = [
	"Queen cried, didn't she.",
	"Some woman was homeless, wasn't she.",
	"Some women were older, wasn't she.",
	"Some women were older, weren't they.",
	"Debra was a woman with a daughter, wasn't she?",
	"Was Debra a woman, wasn't she?",
	"Queen was a homeless woman who was a mother, wasn't she?",
	"Queen was a homeless woman who had a daughter, wasn't she?",
	"The homeless woman who had a daughter was Queen, wasn't she?",
	"Queen had a daughter, didn't she?",
	"Queen had a daughter, wasn't she?",
	"Queen had a mother, did she?",
	"Queen did have a mother, didn't she?",
	"Queen didn't have a mother, did she?",
	"Queen didn't have a mother, did he?",
	"Some women had counselors, didn't they?"
	]

neg_tag_test = [
	"Queen didn't cry, did she.",
	"Some woman wasn't homeless, was she.",
	"Some women weren't older, was she.",
	"Some women weren't older, were they.",
	"Debra wasn't a woman with a daughter, was she?",
	"Wasn't Debra a woman, was she?",
	"Queen wasn't a homeless woman who was a mother, was she?",
	"Queen wasn't a homeless woman who had a daughter, was she?",
	"The homeless woman who had a daughter wasn't Queen, was she?",
	"Queen didn't have a daughter, did she?",
	"Queen didn't have a daughter, was she?",
	"Queen didn't have a mother, did she?",
	"Queen did have a mother, didn't she?",
	"Queen did have a mother, did she?",
	"Queen did have a mother, did he?",
	"Some women didn't have counselors, did they?"
	]

test_possessives = [
	"Jennifer's mother looked back.",
	"Queen's counselor talked to the daughter.",
	"Queen's daughter got Jennifer's birthday card.",
	"Did Jennifer's mother give a birthday card to the black woman's daughter?",
	"Did Jennifer's mother give a birthday card to a black woman's daughter?",
	"Did Debra talk to Jennifer?",
	"The daughter of Queen talked to Debra.",
	"Did the counselor of Queen talk to Jennifer?",
	"Did a counselor of Queen talk to Jennifer?",
	"Did the counselor of a black woman talk to Queen's daughter?",
	"Did the counselor of the black woman have money?",
	"Did a counselor of a homeless woman have money?",
	"Did the counselors of the homeless women have money?",
	"Did the mother of Jennifer have money?",
	"Did the daughter of Queen have money?",
	"Did the daughter of the black woman have money?",
	"Did the daughter of Queen talk to Debra?"
	]
haves = [
	-- "The lotion had a beautiful smell",
	"Did Queen have Jennifer?",
	"Did Queen have Jennifer's father?",
	"Did Queen have a husband?",
	"Did Queen have a mother?",
	"Did Queen have a daughter?",
	"Did Queen's father have a mother?",
	"Did Debra have a job?",
	"Did Debra have some job?",
	"Did Debra have money?",
	"Did Queen's father have money?",
	"Did Debra have money?",
	"Did Ann have a parent?",
	"Did Ann have some parents?",
	"Did Ann have parents?",
	"Did Ann's father have a parent?",
	"Did Ann's father have some parents?",
	"Did Ann's father have parents?",
	"Did Ann have work?",
	"Did Debra work?",
	"Did Debra have work?",
	"Did Debra have a job?",
	"Did Queen have work?",
	"Did Queen have a job?",
	"Did Queen's father have work?",
	"Did a counselor have a job?",
	"Did a counselor have a woman's job?",
	"Did a counselor have Queen's job?",
	"Did a counselor have a mother?",
	"Did a counselor have a daughter?",
	-- "Did a job have a salary?",
	"Did a homeless woman have money?",
	"Did a homeless woman have some money?",
	"Did a homeless woman's daughter have some money?",
	"Did a homeless woman's daughter have a birthday card?",
	"Did the daughter have some money?",
	"Did the daughter have no money?",
	"Debra's daughter had many jobs in the State of Colorado.",
	"Did the parent have some lotion?",
	"Did the parent have no lotion?",
	"Did the State of Colorado have money?",
	"Did the Gathering Place have money?",
	"Did the job have money?",
	"Did Queen's daughter have money?",
	"Did a counselor have a parent?",
	"Did a counselor have some parents?",
	"Did a counselor have parents?",
	"Did the job have a parent?",
	"Did the job have some parents?",
	"Did the job have parents?",
	"Did a counselor have a worker?",
	"Did Queen's daughter have a worker?",
	"Did the job have a worker?",
	"Did someone have a worker?"
	]

ungrammatical = [
	"Did Debra worked?",
	"Queen work?",
	"Man worked.",
	"Some man work.",
	"No worked.",
	"No-one work.",
	"Did Debra taught?",
	"Debra teach Queen.",
	"Queen taught.",
	"Did Queen's daughter looked back?",
	"A counselor look back?",
	"Man looked back.",
	"Some man work.",
	"No looked back.",
	"No-one work.",
	"Did Queen's daughter taught?",
	"Queen's daughter teach a counselor.",
	"A counselor raised."
	]

intransitives = [
	"Debra worked",
	"Did Debra work?",
	"Queen's father worked.",
	"A woman's father worked.",
	"Did Queen's father work?",
	"Did a woman's father work?",
	"A man worked.",
	"Some man worked.",
	"No one worked.",
	"No-one worked.",
	"Everybody worked.",
	"Everyone worked.",
	"Many persons worked.",
	"No person worked.",
	"Did the man work?",
	"Did some man work?",
	"Did some men work?",
	"Did some woman work?",
	"Did some women work?",
	"Most women worked.",
	"Most women didn't work.",
	"Several women worked.",
	"Several women didn't work.",
	"Many women worked.",
	"Many women didn't work.",
	"All women worked.",
	"No woman worked.",
	"Most men worked.",
	"Most men didn't work.",
	"Several men worked.",
	"Several men didn't work.",
	"Many men worked.",
	"Many men didn't work.",
	"All men worked.",
	"No man worked.",
	"Did Queen work for the State of Colorado?",
	"Did Debra work for the State of Colorado?",
	"Did Debra work at a shelter?",
	"Did Queen's father work for the State of Colorado?",
	"Queen's daughter got married.",
	"Did Queen's daughter cry?",
	"Did the counselor cry?",
	"Did Queen's father cry?",
	"A man cried.",
	"Some man cried.",
	"No one cried.",
	"No-one cried.",
	"Everybody cried.",
	"Everyone cried.",
	"Many persons cried.",
	"No person cried.",
	"Did the man cry?",
	"Did some man cry?",
	"Did some men cry?",
	"Did some woman cry?",
	"Did some women cry?",
	"Most persons cried.",
	"Most men cried.",
	"Most men didn't cry.",
	"Several men cried.",
	"Several men didn't cry.",
	"Several persons cried.",
	"Several persons didn't cry.",
	"Did Queen's daughter look back?",
	"Did a counselor look back?",
	"Did Queen look back?",
	"A man looked back.",
	"Some man looked back.",
	"No one looked back.",
	"No-one looked back.",
	"Everybody looked back.",
	"Everyone looked back.",
	"Many persons looked back.",
	"No person looked back.",
	"Did the man look back?",
	"Did the girl look back?",
	"Did some man look back?",
	"Did some men look back?",
	"Did some woman look back?",
	"Did some women look back?",
	"Most men looked back.",
	"Most men didn't look back.",
	"Several men looked back.",
	"Several men didn't look back.",
	"Many men looked back.",
	"Many men didn't work.",
	"All men looked back.",
	"No man looked back."
	]

transitives = [
	"Did Debra study?",
	"Did Debra study IT?",
	"Debra studied counseling.",
	"Queen studied counseling.",
	"Queen studied counseling in the State of Colorado.",
	"Queen studied counseling at the State of Colorado.",
	"Did Queen go to the State of Colorado?",
	"Some woman went to the State of Colorado.",
	"Some man went to the State of Colorado.",
	"Some boy went to the State of Colorado.",
	"Some man raised Queen.",
	"A man raised Debra",
	"Some woman told a story.",
	"Did a counselor work in the the State of Colorado?",
	"Did a counselor work in the Gathering Place?",
	"A counselor worked on the Gathering Place.",
	"A counselor worked at the Gathering Place.",
	"Did a counselor work at a shelter?",
	"A counselor worked on a shelter.",
	"A counselor worked in a shelter.",
	"A counselor worked as a counselor.",
	"Did the job work at a shelter?",
	"The job worked on a shelter.",
	"The job worked in a shelter.",
	"Did the job disappoint a counselor?",
	"Did Queen's daughter study counseling?",
	"Queen's daughter studied counseling.",
	"A counselor studied counseling.",
	"Did a counselor study in the State of Colorado?",
	"A counselor studied counseling at a shelter.",
	"A counselor studied counseling at the shelter.",
	"Did a counselor go to the shelter.",
	"Some woman went to the shelter.",
	"Some man went to the shelter.",
	"Some boy went to the shelter.",
	"Some man raised a counselor.",
	"A man raised Queen's daughter",
	"Some woman told a story.",
	"Did a counselor come from the State of Colorado?",
	"Did Queen immigrate?",
	"Did a counselor immigrate to the State of Colorado?",
	"Did Queen go to the State of Colorado?",
	"Did Queen come from the State of Colorado?",
	"Did Queen's daughter come to the State of Colorado?"
	]

ditransitive_tests = [
	"Queen told a story.",
	"Queen told Queen's father a story.",
	"Queen told a story to Queen's daughter.",
	"Queen told a story to Debra",
	"Queen gave some job to Debra.",
	"Did Queen give some job to Debra.",
	"Did Queen give the job to Debra?",
	"Did Queen give the job to someone?",
	"Queen gave several jobs to Debra.",
	"Did someone give something to Debra?",
	"A woman gave the job to Debra.",
	"A woman gave the job to someone.",
	"A woman gave something to someone.",
	"Someone gave something to someone.",
	"Queen gave Debra some job.",
	"Did Queen give Debra some job?",
	"Did Queen give Debra the job?",
	"Did Queen give someone the job?",
	"Queen gave Debra several jobs.",
	"Did someone give Debra something?",
	"A man gave Debra the job.",
	"A boy gave Debra the job.",
	"Tanya gave Debra the dress.",
	"A man gave someone the job.",
	"A man gave someone something.",
	"Someone gave someone something.",
	"A counselor told a story.",
	"A counselor told the ten_dollar_bill a story.",
	"A counselor told a story to the ten_dollar_bill.",
	"A counselor told a story to Queen's daughter",
	"A counselor gave some lotion to Queen's son.",
	"Did a counselor give some lotion to Queen's son.",
	"Did a counselor give the lotion to Queen's daughter?",
	"Did a counselor give the lotion to someone?",
	"A counselor gave a ten_dollar_bill to Queen's son.",
	"Did someone give something to Queen's daughter?",
	"A woman gave the lotion to Queen's son.",
	"A woman gave the lotion to someone.",
	"A woman gave something to someone.",
	"Someone gave something to someone.",
	"A counselor gave Queen's daughter some birthday_card.",
	"Did a counselor give Queen's daughter some birthday_card?",
	"Did a counselor give Queen's daughter the birthday_card?",
	"Did a counselor give someone the birthday_card?",
	"A counselor gave Queen's daughter several jobs.",
	"Did someone give Queen's daughter something?",
	"A man gave Queen's daughter the home.",
	"A man gave Queen's daughter some home.",
	"A boy gave Queen's daughter the home.",
	"The ten_dollar_bill gave Queen's daughter the worker.",
	"A man gave someone the ten_dollar_bill.",
	"A man gave someone something.",
	"Someone gave someone something.",
	"Did a counselor work at a shelter?",
	"A counselor did work at a shelter.",
	"Did Queen's daughter give a name to the Gathering Place?"
	]

wh_questions =[
	"Who worked?",
	"Who did Debra teach?",
	"Who taught Debra?",
	"Who gave the ten_dollar_bill to Debra?",
	"Who gave some ten_dollar_bill to Debra?",
	"Which person worked?",
	"Which person did Debra teach?",
	"What did Tanya teach?",
	-- "Who did Queen give some job?",
	"Who did Queen give some job to?",
	"Who looked back?",
	"Which man looked back?",
	"Who was Queen's daughter?",
	"Who raised Queen's daughter?",
	"Which woman raised Queen's daughter?",
	"Who gave the birthday card to Queen's daughter?",
	"Who gave some birthday card to Queen's daughter?",
	"Who was the homeless administrative assistant?",
	"Who was the administrative assistant who was homeless?",
	"Which person looked back?",
	"Which woman appreciated a counselor?",
	"Which girl appreciated a counselor?",
	"Which daughter appreciated a counselor?",
	"Who did Queen's daughter appreciate?",
	"Which person did Queen's daughter appreciate?",
	"Which man did Queen's daughter appreciate?",
	"Which woman did Queen's daughter appreciate?",
	"Which thing did Queen's daughter appreciate?",
	"Which worker did Queen's daughter appreciate?",
	-- "To whom did a counselor give some languages?",
	-- "Who did a counselor give some languages to?",
	"Who had a worker?",
	"What did Queen's daughter have?",
	"Who did Queen's daughter have?",
	"Who did the job disappoint?",
	"Who did a counselor's daughter appreciate?",
	"What did a counselor's daughter appreciate?",
	"Which thing did a counselor's daughter appreciate?",
	"Which man did a counselor's daughter appreciate?",
	"Which woman did a counselor's daughter appreciate?",
	"Which worker did a counselor's daughter appreciate?",
	"What did someone have?"
	]

comp_wh_questions = [
	"Who was homeless?",
	"Who was older?",
	"Who was a woman?",
	"Who were women?",
	"Who was the woman?",
	"Who was Tanya's counselor?",
	"Who was Ann's counselor?",
	"Who was Queen's counselor?",
	"Who was the homeless woman that had a daughter?",
	"Who was Queen's daughter?",
	"Who was Queen's daughter's mother?"
	]

relclauses = [
	"A woman who taught Debra worked.",
	"The woman who Debra helped worked.",
	"Did the woman who taught Debra work?",
	"Did every woman who taught Debra work?",
	"The woman who gave the job to Debra worked.",
	"Queen divorced the man that she gave the ten_dollar_bill to.",
	"Queen appreciated the man that helped the woman " 
	 ++ "that was homeless.",
	"A woman who raised Queen's daughter looked back.",
	"The woman who raised Queen's daughter looked back.",
	"Did the woman who raised Queen's daughter look back?",
	"Did every person who raised Queen's daughter look back?",
	"Did some person who raised Queen's daughter look back?",
	"The woman who gave the ten_dollar_bill to Queen's daughter looked back.",
	"Queen married the man that gave the ten_dollar_bill to Queen's son.",
	"The man that Queen married gave the ten_dollar_bill to Queen's son.",
	"The man Queen married gave the ten_dollar_bill to Queen's son.",
	"The job disappointed the man that gave Queen's daughter the ten_dollar_bill.",
	"The man that the job disappointed worked for the State of Colorado.",
	"The man the job disappointed worked for the State of Colorado.",
	"Queen's daughter accepted the ten_dollar_bill that a man gave Queen's son.",
	"Queen's daughter accepted the ten_dollar_bill that a man gave to Queen's son.",
	"Queen appreciated the man that gave the girl \
	 \that worked for the State of Colorado a ten_dollar_bill?"
	]



relppR_test = [
	"A woman with some lotion worked.",
	"A woman with no lotion worked.",
	"The woman with the ten_dollar_bill got a birthday card.",
	"The woman with the ten_dollar_bill gave a birthday card to Jennifer.",
	"A woman who didn't have a ten dollar bill gave a birthday card to Jennifer.",
	"The woman with the ten_dollar_bill gave a birthday card."
	]



lf0 = Rel "worked" [ Const(ents!!17) ]
lf00 = (Conj [(Rel "person" [Var 0]), (Rel "worked" [Var 0]) ] ) 
-- lf000 = (Exists (Conj [(Rel "person" [Var 0]), (Rel "worked" [Var 0]) ] )) (Const(ents)!!17)

lf1 = (Equi  (Rel "married" [ Const(ents!!9), Const(ents!!1) ]) (Neg (Rel "married" [ Const(ents!!8), Const(ents!!17)]) ) )

lf2 = (Conj [ (Rel "married" [ Const (ents !! 9), Const       (ents !! 1)]), (Rel "married" [ Const (ents !! 8), Const (ents !!   17)]) ] )

lf3 = Rel "married" [ Const (ents !! 8), Const (ents !! 17)]
lf4 = (Impl  (Rel "married" [ Const (ents !! 9), Const        (ents !! 1)]) (Rel "married" [ Const (ents !! 8), Const (ents !!    17)])  )
lf5 = (Conj [ (Rel "married" [ Const (ents !! 9), Const       (ents !! 1)]), (Rel "married" [ Const (ents !! 8), Const (ents !!   17)]) ] )
lf6 = (Disj [ (Rel "married" [ Const (ents !! 9), Const       (ents !! 1)]), (Rel "married" [ Const (ents !! 8), Const (ents !!   17)]) ] )

lf70 = ( \x -> ( Conj [ (Rel "daughter" [x]), (Rel "have" [x, Const (ents !! 8)]) ] ) ) (Const (ents !! 12) )
lf71 = ( \x -> ( Conj [ (Rel "daughter" [x]), (Rel "have" [x, Const (ents !! 17)]) ] ) ) (Const (ents !! 12) )
lf72 = ( \x -> ( Conj [ (Rel "daughter" [x]), (Rel "have" [x, Const (ents !! 17)]) ] ) ) (Const (ents !! 12) )
lf73 = \x -> Conj [ (Rel "daughter" [x]), (Rel "have" [x, Const (ents !! 17)]) ]
lf74 = ( \x -> ( Conj [ (Rel "daughter" [x]), (Rel "have" [x, Const (ents !! 17)]) ] ) )
lf75 = \x -> Impl (Rel "daughter" [x]) (Rel "have" [x, Const (ents !! 17)])
