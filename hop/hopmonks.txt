On page 259 of HOP, MJD is talking of a linked list whose nodes are only constructed when the subroutine, tail is evaluated.

The code for tail is similar to the following:

<code>

sub tail {
        my $list = shift;
        if ( ref( $list->[1] eq 'CODE' ) { return $s->[1]->() );
        else { return $s->[1] }
}

</code>

The code to construct the list, a list of the numbers from m to n, is:

<code>

sub upto {
        my ($m, $n) = @_;
        return if $m > $n;
        node( $m, promise { upto($m+1, $n) } );
}

</code>

where:

<code>

sub promise (&) { $_[0] }

</code>

and:

<code>

sub node {
        my ($head, $tail) = @_;
        return [$head, $tail];
}

</code>

According to MJD, the tail() function sees the promise and invokes the anonymous promise function, which in turn invokes upto($m+1, $n).

When I try this code out on Fedora 9 with perl-5.10.0, I get the error:

<code>

'Can't call method "promise" on an undefined value.'

</code>

It is apparently parsing the block argument to promise as an indirect method call on the non-existent object { upto($m+1, $n) }

If I wrap the block argument to promise in parentheses, I get the errors:

<code>

Odd number of elements in anonymous hash at stream.pl line 19.
Use of uninitialized value in anonymous hash ({}) at stream.pl line 19.

</code>

If I then disambiguate the thing in braces as a block with { return upto($m+1, $n) }, undef is returned.

And if I replace the braces in the original line with parentheses, like 

<code>

        node( $m, promise ( upto($m+1, $n) ) );

</code>

the function is eagerly evaluated, not lazily.

So, what do I tell MJD? I think this probably worked before. Is this a problem with newer perls?

