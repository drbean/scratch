use MyStream
star(unionordered(concat( literal("a"), plus(literal("b"))), literal("c") ))
show star(unionordered(concat( literal("a"), plus(literal("b"))), literal("c") )), 22
$_REPL->load_plugin('DumpHistory')
show balanced(charclass('ab')), 22
$_REPL->load_plugin('DumpHistory')
my @h = io('repl.txt')->slurp
eval $h[-2]
eval $h[-3]
show balanced(charclass('ab')), 22
use MyStream
show balanced(charclass('ab')), 22
eval $h[-2]
eval $h[-1]
$_REPL->load_plugin('DumpHistory')
eval $h[-1]
use IO::All
my @h = io('repl.txt')->slurp
@h
eval $h[0]
show literal('a')
show literal('(]h')
eval $h[-3]
$_REPL->load_plugin('DumpHistory')
use IO::All
my @h = io('repl.txt')->slurp
eval $h[0]
eval $h[1]
@h = io('repl.txt')->slurp
eval $h[1]
my $s = eval $h[1]
show $s, 22
balanced(literal('a'))
show balanced(literal('a')), 22
$_REPL->load_plugin('DumpHistory')
use MyCurry
my $n=0
my $i = sub{$n++}
*double = curry(\&imap)->(sub{$_[0] * 2})
my $d = double $i
$_REPL->load_plugin(DumpHistory)
$_REPL->load_plugin(['DumpHistory')
$_REPL->load_plugin('DumpHistory')
use MyCurry
my $n=0
my $i = sub{$n++}
*double = curry(\&imap)->(sub{$_[0]*2})
my $d = double $i
$d->()
$d->()
$d->()
$d->()
my $dd = double $d
$dd->()
$dd->()
$dd->()
$d->()
$dd->()
$dd->()
$d->()
$dd->()
my $cmap = curry(\&imap)
$cmap->(sub{$_[0]*3)->($i)
$cmap->(sub{$_[0]*3})->($i)
$cmap->(sub{$_[0]*3})->($i)->()
$cmap->(sub{$_[0]*3})->($i)->()
$cmap->(sub{$_[0]*3})->($d)->()
$cmap->(sub{$_[0]*3})->($d)->()
$_REPL->load_plugin('History')
$_REPL->push_history('$x')
$x
$_REPL->load_plugin('History')
$_REPL->load_plugin('DumpHistory')
$_REPL->load_plugin('History')
$_REPL->load_plugin('DumpHistory')
$_REPL->load_plugin('History')
$_REPL->load_plugin('DumpHistory')
$_REPL->load_plugin('History')
$_REPL->load_plugin('DumpHistory')
$_REPL->load_plugin('History')
$_REPL->load_plugin('DumpHistory')
$_REPL->load_plugin('DumpHistory')
$_REPL->load_plugin('History')
$_REPL->load_plugin('History')
use MyCurry
my $n=0
my $i = sub{$n++}
*double = curry(\&imap)->(sub{$_[0]*2})
my $d = double $i
$d->()
$d->()
$d->()
$d->()
my $dd = double $d
$dd->()
$dd->()
$dd->()
$d->()
$dd->()
$dd->()
$d->()
$dd->()
my $cmap = curry(\&imap)
$cmap->(sub{$_[0]*3)->($i)
$cmap->(sub{$_[0]*3})->($i)
$cmap->(sub{$_[0]*3})->($i)->()
$cmap->(sub{$_[0]*3})->($i)->()
$cmap->(sub{$_[0]*3})->($d)->()
$cmap->(sub{$_[0]*3})->($d)->()
$_REPL->load_plugin('History')
$_REPL->push_history('$x')
$x
use IO::All
my @lines = io('repl.txt')->slurp
$_REPL->push_history($_) for @lines
use MyStream
star(unionordered(concat( literal("a"), plus(literal("b"))), literal("c") ))
show star(unionordered(concat( literal("a"), plus(literal("b"))), literal("c") )), 22
$_REPL->load_plugin('DumpHistory')
show balanced(charclass('ab')), 22
$_REPL->load_plugin('DumpHistory')
my @h = io('repl.txt')->slurp
eval $h[-2]
eval $h[-3]
show balanced(charclass('ab')), 22
use MyStream
show balanced(charclass('ab')), 22
eval $h[-2]
eval $h[-1]
$_REPL->load_plugin('DumpHistory')
eval $h[-1]
use IO::All
my @h = io('repl.txt')->slurp
@h
eval $h[0]
show literal('a')
show literal('(]h')
eval $h[-3]
$_REPL->load_plugin('DumpHistory')
use IO::All
my @h = io('repl.txt')->slurp
eval $h[0]
eval $h[1]
@h = io('repl.txt')->slurp
eval $h[1]
my $s = eval $h[1]
show $s, 22
balanced(literal('a')
)
show balanced(literal('a')), 22
$_REPL->load_plugin('DumpHistory')
use MyCurry
my $n=0
my $i = sub{$n++}
*double = curry(\&imap)->(sub{$_[0] * 2})
my $d = double $i
$_REPL->load_plugin(DumpHistory)
$_REPL->load_plugin(['DumpHistory')
$_REPL->load_plugin('DumpHistory')
$_REPL->load_plugin('History')
$_REPL->load_plugin('DumpHistory')
$_REPL->load_plugin('History')
$_REPL->load_plugin('DumpHistory')
$_REPL->load_plugin('History')
$_REPL->load_plugin('DumpHistory')
$_REPL->load_plugin('History')
$_REPL->load_plugin('DumpHistory')
$_REPL->load_plugin('History')
$_REPL->load_plugin('DumpHistory')
$_REPL->load_plugin('DumpHistory')
$_REPL->load_plugin('History')
$_REPL->load_plugin('History')
use MyCurry
my $n=0
my $i = sub{$n++}
*double = curry(\&imap)->(sub{$_[0]*2})
my $d = double $i
$d->()
$d->()
$d->()
$d->()
my $dd = double $d
$dd->()
$dd->()
$dd->()
$d->()
$dd->()
$dd->()
$d->()
$dd->()
my $cmap = curry(\&imap)
$cmap->(sub{$_[0]*3)->($i)
$cmap->(sub{$_[0]*3})->($i)
$cmap->(sub{$_[0]*3})->($i)->()
$cmap->(sub{$_[0]*3})->($i)->()
$cmap->(sub{$_[0]*3})->($d)->()
$cmap->(sub{$_[0]*3})->($d)->()
$_REPL->load_plugin('History')
$_REPL->push_history('$x')
$x
use IO::All
my @l = io('repl.txt')->slurp
chomp @l
$_REPL->push_history($_) for @l
use MyStream
star(unionordered(concat( literal("a"), plus(literal("b"))), literal("c") ))
show star(unionordered(concat( literal("a"), plus(literal("b"))), literal("c") )), 22
$_REPL->load_plugin('DumpHistory')
show balanced(charclass('ab')), 22
$_REPL->load_plugin('DumpHistory')
my @h = io('repl.txt')->slurp
eval $h[-2]
eval $h[-3]
show balanced(charclass('ab')), 22
use MyStream
show balanced(charclass('ab')), 22
eval $h[-2]
eval $h[-1]
$_REPL->load_plugin('DumpHistory')
eval $h[-1]
use IO::All
my @h = io('repl.txt')->slurp
@h
eval $h[0]
show literal('a')
show literal('(]h')
eval $h[-3]
$_REPL->load_plugin('DumpHistory')
use IO::All
my @h = io('repl.txt')->slurp
eval $h[0]
eval $h[1]
@h = io('repl.txt')->slurp
eval $h[1]
my $s = eval $h[1]
show $s, 22
balanced(literal('a')
)
show balanced(literal('a')), 22
$_REPL->load_plugin('DumpHistory')
use MyCurry
my $n=0
my $i = sub{$n++}
*double = curry(\&imap)->(sub{$_[0] * 2})
my $d = double $i
$_REPL->load_plugin(DumpHistory)
$_REPL->load_plugin(['DumpHistory')
$_REPL->load_plugin('DumpHistory')
$_REPL->load_plugin('History')
$_REPL->load_plugin('DumpHistory')
$_REPL->load_plugin('History')
$_REPL->load_plugin('DumpHistory')
$_REPL->load_plugin('History')
$_REPL->load_plugin('DumpHistory')
$_REPL->load_plugin('History')
$_REPL->load_plugin('DumpHistory')
$_REPL->load_plugin('History')
$_REPL->load_plugin('DumpHistory')
$_REPL->load_plugin('DumpHistory')
$_REPL->load_plugin('History')
$_REPL->load_plugin('History')
use MyCurry
my $n=0
my $i = sub{$n++}
*double = curry(\&imap)->(sub{$_[0]*2})
my $d = double $i
$d->()
$d->()
$d->()
$d->()
my $dd = double $d
$dd->()
$dd->()
$dd->()
$d->()
$dd->()
$dd->()
$d->()
$dd->()
my $cmap = curry(\&imap)
$cmap->(sub{$_[0]*3)->($i)
$cmap->(sub{$_[0]*3})->($i)
$cmap->(sub{$_[0]*3})->($i)->()
$cmap->(sub{$_[0]*3})->($i)->()
$cmap->(sub{$_[0]*3})->($d)->()
$cmap->(sub{$_[0]*3})->($d)->()
$_REPL->load_plugin('History')
$_REPL->push_history('$x')
$x
$_REPL->load_plugin('History')
$_REPL->load_plugin('DumpHistory')
$_REPL->load_plugin('History')
$_REPL->load_plugin('DumpHistory')
$_REPL->load_plugin('History')
$_REPL->load_plugin('DumpHistory')
$_REPL->load_plugin('History')
$_REPL->load_plugin('DumpHistory')
$_REPL->load_plugin('History')
$_REPL->load_plugin('DumpHistory')
$_REPL->load_plugin('DumpHistory')
$_REPL->load_plugin('History')
$_REPL->load_plugin('History')
use MyCurry
my $n=0
my $i = sub{$n++}
*double = curry(\&imap)->(sub{$_[0]*2})
my $d = double $i
$d->()
$d->()
$d->()
$d->()
my $dd = double $d
$dd->()
$dd->()
$dd->()
$d->()
$dd->()
$dd->()
$d->()
$dd->()
my $cmap = curry(\&imap)
$cmap->(sub{$_[0]*3)->($i)
$cmap->(sub{$_[0]*3})->($i)
$cmap->(sub{$_[0]*3})->($i)->()
$cmap->(sub{$_[0]*3})->($i)->()
$cmap->(sub{$_[0]*3})->($d)->()
$cmap->(sub{$_[0]*3})->($d)->()
$_REPL->load_plugin('History')
$_REPL->push_history('$x')
$x
use IO::All
my @lines = io('repl.txt')->slurp
$_REPL->push_history($_) for @lines
use MyStream
star(unionordered(concat( literal("a"), plus(literal("b"))), literal("c") ))
show star(unionordered(concat( literal("a"), plus(literal("b"))), literal("c") )), 22
$_REPL->load_plugin('DumpHistory')
show balanced(charclass('ab')), 22
$_REPL->load_plugin('DumpHistory')
my @h = io('repl.txt')->slurp
eval $h[-2]
eval $h[-3]
show balanced(charclass('ab')), 22
use MyStream
show balanced(charclass('ab')), 22
eval $h[-2]
eval $h[-1]
$_REPL->load_plugin('DumpHistory')
eval $h[-1]
use IO::All
my @h = io('repl.txt')->slurp
@h
eval $h[0]
show literal('a')
show literal('(]h')
eval $h[-3]
$_REPL->load_plugin('DumpHistory')
use IO::All
my @h = io('repl.txt')->slurp
eval $h[0]
eval $h[1]
@h = io('repl.txt')->slurp
eval $h[1]
my $s = eval $h[1]
show $s, 22
balanced(literal('a')
)
show balanced(literal('a')), 22
$_REPL->load_plugin('DumpHistory')
use MyCurry
my $n=0
my $i = sub{$n++}
*double = curry(\&imap)->(sub{$_[0] * 2})
my $d = double $i
$_REPL->load_plugin(DumpHistory)
$_REPL->load_plugin(['DumpHistory')
$_REPL->load_plugin('DumpHistory')
$_REPL->load_plugin('History')
$_REPL->load_plugin('DumpHistory')
$_REPL->load_plugin('History')
$_REPL->load_plugin('DumpHistory')
$_REPL->load_plugin('History')
$_REPL->load_plugin('DumpHistory')
$_REPL->load_plugin('History')
$_REPL->load_plugin('DumpHistory')
$_REPL->load_plugin('History')
$_REPL->load_plugin('DumpHistory')
$_REPL->load_plugin('DumpHistory')
$_REPL->load_plugin('History')
$_REPL->load_plugin('History')
use MyCurry
my $n=0
my $i = sub{$n++}
*double = curry(\&imap)->(sub{$_[0]*2})
my $d = double $i
$d->()
$d->()
$d->()
$d->()
my $dd = double $d
$dd->()
$dd->()
$dd->()
$d->()
$dd->()
$dd->()
$d->()
$dd->()
my $cmap = curry(\&imap)
$cmap->(sub{$_[0]*3)->($i)
$cmap->(sub{$_[0]*3})->($i)
$cmap->(sub{$_[0]*3})->($i)->()
$cmap->(sub{$_[0]*3})->($i)->()
$cmap->(sub{$_[0]*3})->($d)->()
$cmap->(sub{$_[0]*3})->($d)->()
$_REPL->load_plugin('History')
$_REPL->push_history('$x')
$x
my $n=0
my $i = sub{$n++}
*double = curry(\&imap)->(sub{$_[0]*2})
use MyCurry
*double = curry(\&imap)->(sub{$_[0]*2})
*double = curry(\&imap)->(sub{$_[0]*2})
my $d = double $i
&$d
&$d
my $triple = curry(\&imap)->(sub{$_[0]*3})
$t = triple($i)
my $t = triple($i)
my $t = $triple->($i)
&$t
&$t
&$t
$_REPL->load_plugin('DumpHistory')
use List::Util qw/max sum/; use MyCurry
fold(sub{ max(@_) })->(0)->(0..8)
