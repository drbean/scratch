#!/usr/bin/perl

use strict;
use warnings;
use IO::All;
use YAML::XS qw/LoadFile DumpFile/;
use Cwd;
use List::Util qw/max/;

# $_REPL->load_plugin('DumpHistory');

(my $dir = getcwd) =~ s/^.*\/([^\/]*)$/$1/;
use Grades;
use Grades::Groupwork;
my $l = League->new( leagues => '/home/drbean/042', id => $dir );
my $g = Grades->new({ league => $l });
my $co = Compcomp->new({ league => $l });
my $cl = $g->classwork;
my %m = map { $_->{id} => $_ } @{ $l->members };
my $approach = $l->approach;

my ($gr, $bean_format) = LoadFile "exam/3/g.yaml";
my %inc = map { $_ => $gr->{test}->{$_} - $gr->{base}->{$_} } keys %m;
$gr->{raw_increase} = \%inc;
my $median = (sort {$a<=>$b} grep {$_ != 0} values %inc)[ (keys %m)/2 ];
my $max_points = max values %inc;
my $check = sub {
	my $player = shift();
	my $max_points=52234;
	if ( $gr->{base}->{$player} ) {
		if ( $gr->{raw_increase}->{$player} > $median ) {
			$gr->{grade}->{$player} =  sprintf( "%.2f", 4 + 0.8 *
				($gr->{raw_increase}->{$player} - $median) /
					($max_points - $median) );
		}
		elsif ( $gr->{raw_increase}->{$player} <= $median ) {
			$gr->{grade}->{$player} = sprintf( "%.2f", 3 + 1 *
				$gr->{raw_increase}->{$player} / $median );
		}
		else {
			die "No card.player, no report.grade.player?\n";
		}
	}
};
$gr->{grade}->{$_} = $check->($_) for keys %m;

DumpFile "exam/3/g.yaml", $gr;

# :dump ../../042/rc/memrise_grade.rc;
