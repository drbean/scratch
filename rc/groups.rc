#!/usr/bin/perl;

use 5.10.0;
use strict;
use warnings;
use IO::All;
use YAML qw/LoadFile DumpFile/;
use Cwd;
use POSIX qw/floor ceil/;

$_REPL->load_plugin('DumpHistory');

(my $dir = getcwd) =~ s/^.*\/([^\/]*)$/$1/;
use Grades;
my $l = League->new( leagues => '/home/drbean/001', id => $dir );
my $g = Grades->new({ league => $l });
my $members = $l->members;
my %m = map { $_->{id} => $_ } @$members;
my $grades = $g->grades;

my $session = 3;

my $gs = LoadFile "classwork/$session/groups.yaml";
my @colors = sort keys %$gs;
my ( %g, @t, $m );
my @graded = sort { $grades->{$a} <=> $grades->{$b} }keys %m;
push @t, [ $_, $m{$_}->{name} ] for @graded;
my $fourth = ceil @t/4;
my $rumpPlayers = @t % 4;
my $rumpGroups = $rumpPlayers == 0?	0: 4 - $rumpPlayers;
my $half =	$rumpPlayers == 1?	ceil @t/2:
			$rumpPlayers == 2?	@t/2:
			$rumpPlayers == 3?	floor @t/2:
								@t/2 - 1;
if ( $rumpPlayers ) {
	for my $k ( 0 .. $rumpGroups -1 ) {
		$g{ $colors[ -1 -$k ] } = [ $t[$k]->[1],
								$t[ ( $half - $k ) ]->[1],
								$t[ -1 -$k ]->[1] ];
	}
}
for my $i ( $rumpGroups .. $fourth-1 ) {
	$g{ $colors[ $i - $rumpGroups ] } = [ $t[ $i ]->[1],
									$t[ $half - $i ]->[1],
									$t[ $#t - ( $half - $i ) ]->[1],
									$t[ -1 - $i ]->[1] ];
}

DumpFile "classwork/$session/groups.yaml", \%g;
