#!/usr/bin/perl

use strict;
use warnings;
use IO::All;
use YAML qw/LoadFile DumpFile/;
use Cwd;

use List::Util qw/sum/;
use List::MoreUtils qw/all none any/;

$_REPL->load_plugin('DumpHistory');

(my $dir = getcwd) =~ s/^.*\/([^\/]*)$/$1/;
use Grades;
use Grades::Groupwork;
my $l = League->new( leagues => '/home/drbean/002', id => $dir );
my $g = Grades->new({ league => $l });
my $c = Compcomp->new({ league => $l });
my %m = map { $_->{id} => $_ } @{ $l->members };

my $approach = $l->approach;
my ($t, $z) = LoadFile 'homework/13.yaml';
my $g2 = $t->{grade};
my $g0 = $z->{grade};
my $p0 = $z->{points};
my $p2 = $t->{points};

my %y = ();
$y{cutpoints} = $t->{cutpoints};
$y{exercise} = $t->{exercise};
my %p = map { $_ =>
	# letters => sum ( $p0->{$_}->{letters} + $p2->{$_}->{letters} ),
	# percent => sum ( $p0->{$_}->{percent} + $p2->{$_}->{percent} )
	( ($_ eq 'V9941013')? $p0->{$_}: $p2->{$_} )
		} keys %m;
$y{points} = \%p;
my %g = map { $_ => sum ( $g2->{$_} + $g0->{$_} ) } keys %m;
$y{grade} = \%g;

my %both_grades = map { my $p = $_ ; {$p => all { $_->{$p} } ($g2, $g0)} } sort keys %m;
my %no_grlde =  map { my $p = $_ ; {$p => none { $_->{$p} } ($g2, $g0)} } sort keys %m;

# map { my $p = $_ ; {$p => (not none { $_->{$p} } ($g2, $g0)} ) and (not all { $_->{$p} } ($g2, $g0)} } keys %m;
# map { my $p = $_ ; {$p => (not none { $_->{$p} } ($g2, $g0) ) and (not all { $_->{$p} } ($g2, $g0) } keys %m;
# map { my $p = $_ ; {$p => (not none { $_->{$p} } ($g2, $g0) ) and (not all { $_->{$p} } ($g2, $g0) ) } keys %m;
# map { my $p = $_ ; {$p => (not none { $_->{$p} } ($g2, $g0) ) and (not all { $_->{$p} } ($g2, $g0) ) } } keys %m;
# map { my $p = $_ ; {$p => any { $_->{$p} } ($g2, $g0)} } keys %m;
# map { my $p = $_ ; {$p => any { $_->{$p} } ($g2, $g0)} } keys %m;
# map { my $p = $_ ; {$p => all { $_->{$p} } ($t->{$p}, $g0)} } keys %m;
# map { my $p = $_ ; {$p => (not none { $_->{$p} } ($g2, $g0)} ) and (not all { $_->{$p} } ($g2, $g0)} } keys %m;
# map { my $p = $_ ; {$p => (not none { $_->{$p} } ($g2, $g0) ) and (not all { $_->{$p} } ($g2, $g0) } keys %m;
# map { my $p = $_ ; {$p => (not none { $_->{$p} } ($g2, $g0) ) and (not all { $_->{$p} } ($g2, $g0) ) } keys %m;
# map { my $p = $_ ; {$p => all { $_->{$p}->{letters} } ($p2, $p0)} } keys %m;

my %graded = map { my $pl = $_ ; $pl => all { $_->{$pl} } (\%g, \%p) } sort keys %m;
my %in =  map { my $pl = $_ ; $pl => any { $_->{$pl} } (\%g, \%p) } sort keys %m;
my %missing =  map { my $pl = $_ ; $pl => none { $_->{$pl} } (\%g, \%p) } sort keys %m;
my %no_grade = map { $_ => ( not $g{$_} and defined $p{$_} ) } sort keys %m;
